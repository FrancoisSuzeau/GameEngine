# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create a release

on:
  # push:
  #   branches:
  #     - feature/**
  #     - bugfix/**
  pull_request:
    branches:
      - master
    types: [closed]

permissions:
  contents: write

jobs:
  retrieve_data:
    if: ${{ github.event.pull_request.merged }}
    runs-on: [Windows, self-hosted]
    outputs:
      prefix: ${{ steps.retrieve_branch_name.outputs.PREFIX }}
      major: ${{ steps.retrieve_version_numbers.outputs.MAJOR }}
      minor: ${{ steps.retrieve_version_numbers.outputs.MINOR }}
      patch: ${{ steps.retrieve_version_numbers.outputs.PATCH }}
    steps:
      - name: Retrieve Branch Name
        id: retrieve_branch_name
        run: |
            $branchRef = "${{ github.event.pull_request.head.ref }}"
            $branchName = $branchRef -replace '^refs/heads/', ''
            $prefix = $branchName -split '/'
            $prefix = $prefix[0]
            echo "PREFIX=$prefix" >> $Env:GITHUB_OUTPUT
      
      - name: Retrieve Version Numbers
        id: retrieve_version_numbers
        run: |
            $latestTag = gh api -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" repos/FrancoisSuzeau/Squeamish/tags | jq -r '.[0].name'
            $version = [regex]::Match($latestTag, '^v(\d+\.\d+\.\d+)').Groups[1].Value
            $versionComponents = $version -split '\.'
            $major = $versionComponents[0]
            $minor = $versionComponents[1]
            $patch = $versionComponents[2]
            echo "MAJOR=$major" >> $Env:GITHUB_OUTPUT
            echo "MINOR=$minor" >> $Env:GITHUB_OUTPUT
            echo "PATCH=$patch" >> $Env:GITHUB_OUTPUT

  create_tag:
    if: ${{ github.event.pull_request.merged }}
    runs-on: [Windows, self-hosted]
    outputs:
      new_minor: ${{ steps.increment_version_numbers.outputs.NEW_MINOR }}
      new_patch: ${{ steps.increment_version_numbers.outputs.NEW_PATCH }}
    needs: retrieve_data
    env:
      PREFIX: ${{ needs.retrieve_data.outputs.prefix }}
      MINOR: ${{ needs.retrieve_data.outputs.minor }}
      PATCH: ${{ needs.retrieve_data.outputs.patch }}
    steps:
      - name: Increment Version Numbers
        id: increment_version_numbers
        run: |
            $branch_prefix = "${{ env.PREFIX }}"
            if ($branch_prefix -eq 'feature')
            {
              $minor = [int]${{ env.MINOR }}
              $minor++
              echo "NEW_MINOR=$minor" >> $Env:GITHUB_OUTPUT
              echo "NEW_PATCH=0" >> $Env:GITHUB_OUTPUT
            }
            else
            {
              if ($branch_prefix -eq 'bugfix')
              {
                $patch = [int]${{ env.PATCH }}
                $patch++
                echo "NEW_PATCH=$patch" >> $Env:GITHUB_OUTPUT
                echo "NEW_MINOR=${{ env.MINOR }}" >> $Env:GITHUB_OUTPUT
              }
              else
              {
                Write-Output "Branch prefix is not 'feature' or 'bugfix'."
              }
            }

  compile_inno:
    if: ${{ github.event.pull_request.merged }}
    runs-on: [Windows, self-hosted]
    outputs:
      folder_name: ${{ steps.compile_inno_setup.outputs.FOLDER_NAME }}
      file_name: ${{ steps.compile_inno_setup.outputs.FILE_NAME }}
    needs: [retrieve_data, create_tag]
    env:
      MAJOR: ${{ needs.retrieve_data.outputs.major }}
      MINOR: ${{ needs.create_tag.outputs.new_minor }}
      PATCH: ${{ needs.create_tag.outputs.new_patch }}
    steps:
      - name: Compile Inno Setup
        id: compile_inno_setup
        run: |
            $major = ${{ env.MAJOR }}
            $minor = ${{ env.MINOR }}
            $patch = ${{ env.PATCH }}

            $newtag = "v" + $major + "." + $minor + "." + $patch + "-alpha"
            $setup_wizzard_name = "squeamish-" + $newtag + "_win64-setup"
            
            iscc "D:\Setup\template\script.iss" -dMyAppVersion="$newtag" -dMyBaseOutputFilename="$setup_wizzard_name"

            echo "FOLDER_NAME=$newtag" >> $Env:GITHUB_OUTPUT
            echo "FILE_NAME=$setup_wizzard_name" >> $Env:GITHUB_OUTPUT

  # publish_release:
  #   if: ${{ github.event.pull_request.merged }}
  #   runs-on: [Windows, self-hosted]
  #   needs: compile_inno
  #   env:
  #     FOLDER_NAME: ${{ needs.compile_inno.outputs.folder_name }}
  #     FILE_NAME: ${{ needs.compile_inno.outputs.file_name }}
  #   steps:
  #     - name: Checkout
  #       id: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         repository: 'FrancoisSuzeau/Squeamish'
  #         submodules: true
  #         lfs: true

  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: ${{ env.FOLDER_NAME }}
  #         release_name: "${{ github.event.pull_request.title }}"
  #         body: ""
  #         draft: false
  #         prerelease: true
      
  #     - name: Upload Release Asset
  #       id: upload-release-asset 
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: D:\Setup\${{ env.FOLDER_NAME }}\${{ env.FILE_NAME }}.exe
  #         asset_name: ${{ env.FILE_NAME }}.exe
  #         asset_content_type: application/exe

  publish_message:
    if: ${{ github.event.pull_request.merged }}
    runs-on: [Windows, self-hosted]
    #needs: publish_release
    needs: [compile_inno]
    env:
      FOLDER_NAME: ${{ needs.compile_inno.outputs.folder_name }}
    steps:
      - name: Publish Embeded Release Message
        id: publish_embeded_message
        run: |
            $body = gh api -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" /repos/FrancoisSuzeau/Squeamish/pulls/${{ github.event.pull_request.number }} | jq -r '.body'
            $issuenumber = [regex]::Match($body, '\d+').Value
            $html_url = gh api -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" /repos/FrancoisSuzeau/Squeamish/issues/$issuenumber | jq -r '.html_url'

            $labels = gh api -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" /repos/FrancoisSuzeau/Squeamish/issues/${{ github.event.pull_request.number }}/labels | jq '[.[].name]'
            $labelsarray = $labels | ConvertFrom-Json

            $release_url = "https://github.com/FrancoisSuzeau/Squeamish/releases/tag/" + ${{ env.FOLDER_NAME }}

            .github/workflows/send_webhook_pr.ps1 ${{ github.actor }} https://github.com/${{ github.actor }}.png?size=460 "${{ github.event.pull_request.title }}" $labelsarray $body $html_url $release_url