# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Create a release

on:
  push:
    branches:
      - feature/**
      - bugfix/**
  # pull_request:
  #   branches:
  #     - master
  #   types: [closed]

jobs:
  retrieve_data:
    # if: ${{ github.event.pull_request.merged }}
    runs-on: [Windows, self-hosted]
    steps:
    - name: Retrieve Branch Name
      id: retrieve_branch_name
      run: |
          $branchRef = $env:GITHUB_REF
          $branchName = $branchRef -replace '^refs/heads/', ''
          $prefix = $branchName -split '/'
          $prefix = $prefix[0]
          echo "PREFIX=$prefix" >> $env:GITHUB_ENV
    
    - name: Retrieve Version Numbers
      id: retrieve_version_numbers
      run: |
          $latestTag = gh api -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" repos/FrancoisSuzeau/Squeamish/tags | jq -r '.[0].name'
          $version = [regex]::Match($latestTag, '^v(\d+\.\d+\.\d+)').Groups[1].Value
          $versionComponents = $version -split '\.'
          echo "MAJOR=$versionComponents[0]" >> $env:GITHUB_ENV
          echo "MINOR=$versionComponents[1]" >> $env:GITHUB_ENV
          echo "PATCH=$versionComponents[2]" >> $env:GITHUB_ENV

  create_tag:
    # if: ${{ github.event.pull_request.merged }}
    runs-on: [Windows, self-hosted]
    needs: retrieve_data
    steps:
    - name: Increment Version Numbers
      id: increment_version_numbers
      run: |
          $branch_prefix = ${{ env.PREFIX }}
          if ($branch_prefix -eq 'feature')
          {
            $minor = [int]${{ env.MINOR }}
            $minor++
            echo "MINOR=$minor" >> $env:GITHUB_ENV
            echo "PATCH=0" >> $env:GITHUB_ENV
          }
          else
          {
            if ($branch_prefix -eq 'bugfix')
            {
              $patch = [int]${{ env.PATCH }}
              $patch++
              echo "PATCH=$patch" >> $env:GITHUB_ENV
            }
            else
            {
              Write-Output "Branch prefix is not 'feature' or 'bugfix'."
            }
          }

  compile_inno:
    # if: ${{ github.event.pull_request.merged }}
    runs-on: [Windows, self-hosted]
    needs: create_tag
    steps:
      - name: Compile Inno Setup
        id: compile_inno_setup
        run: |
            $major = ${{ env.MAJOR }}
            $minor = ${{ env.MINOR }}
            $patch = ${{ env.PATCH }}

            $newtag = "v" + $major + "." + $minor + "." + $patch + "-alpha"
            $setup_wizzard_name = "squeamish-" + $newtag + "_win64-setup"
            
            iscc "D:\Setup\template\script.iss" -dMyAppVersion="$newtag" -dMyBaseOutputFilename="$setup_wizzard_name"

    # - name: The Others
    #   run: |
    #       $branchRef = $env:GITHUB_REF
    #       $branchName = $branchRef -replace '^refs/heads/', ''
    #       $prefix = $branchName -split '/'
    #       if ($prefix[0] -eq 'feature' -or $prefix[0] -eq 'bugfix') 
    #       {

    #         $latestTag = gh api -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" repos/FrancoisSuzeau/Squeamish/tags | jq -r '.[0].name'
    #         $version = [regex]::Match($latestTag, '^v(\d+\.\d+\.\d+)').Groups[1].Value
    #         $versionComponents = $version -split '\.'
    #         $major = [int]$versionComponents[0]
    #         $minor = [int]$versionComponents[1]
    #         $patch = [int]$versionComponents[2]

    #         if ($prefix[0] -eq 'feature')
    #         {
    #           $minor++
    #           $patch = 0
    #         }

    #         if ($prefix[0] -eq 'bugfix')
    #         {
    #           $patch++
    #         }

    #         $newtag = "v" + $major + "." + $minor + "." + $patch + "-alpha"

    #         $setup_wizzard_name = "squeamish-" + $newtag + "_win64-setup"

    #         iscc "D:\Setup\template\script.iss" -dMyAppVersion="$newtag" -dMyBaseOutputFilename="$setup_wizzard_name"


    #       } 
    #       else 
    #       {

    #         Write-Output "Branch prefix is not 'feature' or 'bugfix'."

    #       }
